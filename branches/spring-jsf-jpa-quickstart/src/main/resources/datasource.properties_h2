# ##################################################################################### #
# ### FOR ADDITIONAL INFORMATION, SEE APACHE COMMONS DBCP2 CONFIGURATION PROPERTIES ### #
# ######## AT http://commons.apache.org/proper/commons-dbcp/configuration.html ######## #
# ##################################################################################### #

# ##################################################################################### #
# ################################# BASIC ADJUSTMENTS ################################# #
# ##################################################################################### #

# The connection username to be passed to our JDBC driver to establish a connection.
username=

# The connection password to be passed to our JDBC driver to establish a connection.
password=

# The connection URL to be passed to our JDBC driver to establish a connection.
url=jdbc:h2:mem:quickstart

# The fully qualified Java class name of the JDBC driver to be used.
driverClassName=org.h2.Driver

# The connection properties that will be sent to our JDBC driver when establishing new connections. 
# Format of the string must be [propertyName=property;]* 
# NOTE - The "user" and "password" properties will be passed explicitly, so they do not need to be included here.
connectionProperties=

# The SQL query that will be used to validate connections from this pool before returning them to the caller. If specified, this query MUST be an SQL SELECT statement that returns at least one row. If not specified, connections will be validation by calling the isValid() method.
validationQuery=SELECT 1

# The default auto-commit state of connections created by this pool. If not set then the setAutoCommit method will not be called.
defaultAutoCommit=false

# The default read-only state of connections created by this pool. If not set then the setReadOnly method will not be called. (Some drivers don't support read only mode, ex: Informix).
defaultReadOnly=false

# The default TransactionIsolation state of connections created by this pool. One of the following: (see javadoc)
# - NONE
# - READ_COMMITTED
# - READ_UNCOMMITTED
# - REPEATABLE_READ
# - SERIALIZABLE
defaultTransactionIsolation=READ_COMMITTED

# The default catalog of connections created by this pool.
defaultCatalog=

# If true, the pooled connection will cache the current readOnly and autoCommit settings when first read or written and on all subsequent writes. This removes the need for additional database queries for any further calls to the getter. If the underlying connection is accessed directly and the readOnly and/or autoCommit settings changed the cached values will not reflect the current state. In this case, caching should be disabled by setting this attribute to false.
cacheState=true

# The initial number of connections that are created when the pool is started.
initialSize=8

# The maximum number of active connections that can be allocated from this pool at the same time, or negative for no limit.
maxTotal=32

# The maximum number of connections that can remain idle in the pool, without extra ones being released, or negative for no limit.
maxIdle=16

# The minimum number of connections that can remain idle in the pool, without extra ones being created, or zero to create none.
minIdle=8

# The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception, or -1 to wait indefinitely.
# default = -1 (indefinitely)
maxWaitMillis=16000

# ##################################################################################### #
# ############################### ADVANCED ADJUSTMENTS ################################ #
# ##################################################################################### #

# The indication of whether objects will be validated after creation. If the object fails to validate, the borrow attempt that triggered the object creation will fail.
testOnCreate=true

# The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and we will attempt to borrow another.
testOnBorrow=true

# The indication of whether objects will be validated before being returned to the pool.
testOnReturn=true

# The indication of whether objects will be validated by the idle object evictor (if any). If an object fails to validate, it will be dropped from the pool.
testWhileIdle=true

# The number of milliseconds to sleep between runs of the idle object evictor thread. When non-positive, no idle object evictor thread will be run.
timeBetweenEvictionRunsMillis=-1

# The number of objects to examine during each run of the idle object evictor thread (if any).
numTestsPerEvictionRun=3

# The minimum amount of time an object may sit idle in the pool before it is eligable for eviction by the idle object evictor (if any).
# default = 1000 * 60 * 30
minEvictableIdleTimeMillis=1800000

# The minimum amount of time a connection may sit idle in the pool before it is eligible for eviction by the idle connection evictor, with the extra condition that at least "minIdle" connections remain in the pool. When miniEvictableIdleTimeMillis is set to a positive value, miniEvictableIdleTimeMillis is examined first by the idle connection evictor - i.e. when idle connections are visited by the evictor, idle time is first compared against miniEvictableIdleTimeMillis (without considering the number of idle connections in the pool) and then against softMinEvictableIdleTimeMillis, including the minIdle constraint.
softMiniEvictableIdleTimeMillis=-1

# The maximum lifetime in milliseconds of a connection. After this time is exceeded the connection will fail the next activation, passivation or validation test. A value of zero or less means the connection has an infinite lifetime.
maxConnLifetimeMillis=-1

# Flag to log a message indicating that a connection is being closed by the pool due to maxConnLifetimeMillis exceeded. Set this property to false to suppress expired connection logging that is turned on by default.
logExpiredConnections=true

# A Collection of SQL statements that will be used to initialize physical connections when they are first created. These statements are executed only once - when the configured connection factory creates the connection.
connectionInitSqls=

# True means that borrowObject returns the most recently used ("last in") connection in the pool (if there are idle connections available). False means that the pool behaves as a FIFO queue - connections are taken from the idle instance pool in the order that they are returned to the pool.
lifo=true

# Enable prepared statement pooling for this pool.
poolPreparedStatements=false

# The maximum number of open statements that can be allocated from the statement pool at the same time, or negative for no limit.
# default = -1 (unlimited)
maxOpenPreparedStatements=-1

# Controls if the PoolGuard allows access to the underlying connection.
accessToUnderlyingConnectionAllowed=false

# Flags to remove abandoned connections if they exceed the removeAbandonedTimout.
# A connection is considered abandoned and eligible for removal if it has not been used for longer than removeAbandonedTimeout.
# Creating a Statement, PreparedStatement or CallableStatement or using one of these to execute a query (using one of the execute methods) resets the lastUsed property of the parent connection.
# Setting one or both of these to true can recover db connections from poorly written applications which fail to close connections.
# Setting removeAbandonedOnMaintenance to true removes abandoned connections on the maintenance cycle (when eviction ends). This property has no effect unless maintenance is enabled by setting timeBetweenEvicionRunsMillis to a positive value. 
# If removeAbandonedOnBorrow is true, abandoned connections are removed each time a connection is borrowed from the pool, with the additional requirements that
# - getNumActive() > getMaxTotal() - 3; and
# - getNumIdle() < 2
removeAbandonedOnMaintenance=false
removeAbandonedOnBorrow=false

# Timeout in seconds before an abandoned connection can be removed.
removeAbandonedTimeout=300

# Flag to log stack traces for application code which abandoned a Statement or Connection.
# Logging of abandoned Statements and Connections adds overhead for every Connection open or new Statement because a stack trace has to be generated.
logAbandoned=false

# When this property is true, validation fails fast for connections that have thrown "fatal" SQLExceptions. Requests to validate disconnected connections fail immediately, with no call to the driver's isValid method or attempt to execute a validation query.
# The SQL_STATE codes considered to signal fatal errors are by default the following:
# - 57P01 (ADMIN SHUTDOWN)
# - 57P02 (CRASH SHUTDOWN)
# - 57P03 (CANNOT CONNECT NOW)
# - 01002 (SQL92 disconnect error)
# - JZ0C0 (Sybase disconnect error)
# - JZ0C1 (Sybase disconnect error)
# - Any SQL_STATE code that starts with "08"
# To override this default set of disconnection codes, set the disconnectionSqlCodes property.
fastFailValidation=false

# Comma-delimited list of SQL_STATE codes considered to signal fatal disconnection errors. Setting this property has no effect unless fastFailValidation is set to true.
disconnectionSqlCodes=